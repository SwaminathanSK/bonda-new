// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SrvGetPoseAnswer.proto

#ifndef PROTOBUF_INCLUDED_SrvGetPoseAnswer_2eproto
#define PROTOBUF_INCLUDED_SrvGetPoseAnswer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Pose.pb.h"
#include "Twist.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_SrvGetPoseAnswer_2eproto 

namespace protobuf_SrvGetPoseAnswer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_SrvGetPoseAnswer_2eproto
namespace mvsim_msgs {
class SrvGetPoseAnswer;
class SrvGetPoseAnswerDefaultTypeInternal;
extern SrvGetPoseAnswerDefaultTypeInternal _SrvGetPoseAnswer_default_instance_;
}  // namespace mvsim_msgs
namespace google {
namespace protobuf {
template<> ::mvsim_msgs::SrvGetPoseAnswer* Arena::CreateMaybeMessage<::mvsim_msgs::SrvGetPoseAnswer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mvsim_msgs {

// ===================================================================

class SrvGetPoseAnswer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mvsim_msgs.SrvGetPoseAnswer) */ {
 public:
  SrvGetPoseAnswer();
  virtual ~SrvGetPoseAnswer();

  SrvGetPoseAnswer(const SrvGetPoseAnswer& from);

  inline SrvGetPoseAnswer& operator=(const SrvGetPoseAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SrvGetPoseAnswer(SrvGetPoseAnswer&& from) noexcept
    : SrvGetPoseAnswer() {
    *this = ::std::move(from);
  }

  inline SrvGetPoseAnswer& operator=(SrvGetPoseAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SrvGetPoseAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SrvGetPoseAnswer* internal_default_instance() {
    return reinterpret_cast<const SrvGetPoseAnswer*>(
               &_SrvGetPoseAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SrvGetPoseAnswer* other);
  friend void swap(SrvGetPoseAnswer& a, SrvGetPoseAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SrvGetPoseAnswer* New() const final {
    return CreateMaybeMessage<SrvGetPoseAnswer>(NULL);
  }

  SrvGetPoseAnswer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SrvGetPoseAnswer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SrvGetPoseAnswer& from);
  void MergeFrom(const SrvGetPoseAnswer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SrvGetPoseAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string errorMessage = 2;
  bool has_errormessage() const;
  void clear_errormessage();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& errormessage() const;
  void set_errormessage(const ::std::string& value);
  #if LANG_CXX11
  void set_errormessage(::std::string&& value);
  #endif
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  ::std::string* mutable_errormessage();
  ::std::string* release_errormessage();
  void set_allocated_errormessage(::std::string* errormessage);

  // optional .mvsim_msgs.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  private:
  const ::mvsim_msgs::Pose& _internal_pose() const;
  public:
  const ::mvsim_msgs::Pose& pose() const;
  ::mvsim_msgs::Pose* release_pose();
  ::mvsim_msgs::Pose* mutable_pose();
  void set_allocated_pose(::mvsim_msgs::Pose* pose);

  // optional .mvsim_msgs.Twist twist = 5;
  bool has_twist() const;
  void clear_twist();
  static const int kTwistFieldNumber = 5;
  private:
  const ::mvsim_msgs::Twist& _internal_twist() const;
  public:
  const ::mvsim_msgs::Twist& twist() const;
  ::mvsim_msgs::Twist* release_twist();
  ::mvsim_msgs::Twist* mutable_twist();
  void set_allocated_twist(::mvsim_msgs::Twist* twist);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // required bool objectIsInCollision = 4;
  bool has_objectisincollision() const;
  void clear_objectisincollision();
  static const int kObjectIsInCollisionFieldNumber = 4;
  bool objectisincollision() const;
  void set_objectisincollision(bool value);

  // @@protoc_insertion_point(class_scope:mvsim_msgs.SrvGetPoseAnswer)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_errormessage();
  void clear_has_errormessage();
  void set_has_pose();
  void clear_has_pose();
  void set_has_twist();
  void clear_has_twist();
  void set_has_objectisincollision();
  void clear_has_objectisincollision();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr errormessage_;
  ::mvsim_msgs::Pose* pose_;
  ::mvsim_msgs::Twist* twist_;
  bool success_;
  bool objectisincollision_;
  friend struct ::protobuf_SrvGetPoseAnswer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SrvGetPoseAnswer

// required bool success = 1;
inline bool SrvGetPoseAnswer::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SrvGetPoseAnswer::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SrvGetPoseAnswer::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SrvGetPoseAnswer::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool SrvGetPoseAnswer::success() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.SrvGetPoseAnswer.success)
  return success_;
}
inline void SrvGetPoseAnswer::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:mvsim_msgs.SrvGetPoseAnswer.success)
}

// optional string errorMessage = 2;
inline bool SrvGetPoseAnswer::has_errormessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SrvGetPoseAnswer::set_has_errormessage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SrvGetPoseAnswer::clear_has_errormessage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SrvGetPoseAnswer::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errormessage();
}
inline const ::std::string& SrvGetPoseAnswer::errormessage() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.SrvGetPoseAnswer.errorMessage)
  return errormessage_.GetNoArena();
}
inline void SrvGetPoseAnswer::set_errormessage(const ::std::string& value) {
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvsim_msgs.SrvGetPoseAnswer.errorMessage)
}
#if LANG_CXX11
inline void SrvGetPoseAnswer::set_errormessage(::std::string&& value) {
  set_has_errormessage();
  errormessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mvsim_msgs.SrvGetPoseAnswer.errorMessage)
}
#endif
inline void SrvGetPoseAnswer::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvsim_msgs.SrvGetPoseAnswer.errorMessage)
}
inline void SrvGetPoseAnswer::set_errormessage(const char* value, size_t size) {
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvsim_msgs.SrvGetPoseAnswer.errorMessage)
}
inline ::std::string* SrvGetPoseAnswer::mutable_errormessage() {
  set_has_errormessage();
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.SrvGetPoseAnswer.errorMessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SrvGetPoseAnswer::release_errormessage() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.SrvGetPoseAnswer.errorMessage)
  if (!has_errormessage()) {
    return NULL;
  }
  clear_has_errormessage();
  return errormessage_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SrvGetPoseAnswer::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    set_has_errormessage();
  } else {
    clear_has_errormessage();
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.SrvGetPoseAnswer.errorMessage)
}

// optional .mvsim_msgs.Pose pose = 3;
inline bool SrvGetPoseAnswer::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SrvGetPoseAnswer::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SrvGetPoseAnswer::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mvsim_msgs::Pose& SrvGetPoseAnswer::_internal_pose() const {
  return *pose_;
}
inline const ::mvsim_msgs::Pose& SrvGetPoseAnswer::pose() const {
  const ::mvsim_msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:mvsim_msgs.SrvGetPoseAnswer.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::mvsim_msgs::Pose*>(
      &::mvsim_msgs::_Pose_default_instance_);
}
inline ::mvsim_msgs::Pose* SrvGetPoseAnswer::release_pose() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.SrvGetPoseAnswer.pose)
  clear_has_pose();
  ::mvsim_msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::mvsim_msgs::Pose* SrvGetPoseAnswer::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::mvsim_msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.SrvGetPoseAnswer.pose)
  return pose_;
}
inline void SrvGetPoseAnswer::set_allocated_pose(::mvsim_msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.SrvGetPoseAnswer.pose)
}

// optional .mvsim_msgs.Twist twist = 5;
inline bool SrvGetPoseAnswer::has_twist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SrvGetPoseAnswer::set_has_twist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SrvGetPoseAnswer::clear_has_twist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mvsim_msgs::Twist& SrvGetPoseAnswer::_internal_twist() const {
  return *twist_;
}
inline const ::mvsim_msgs::Twist& SrvGetPoseAnswer::twist() const {
  const ::mvsim_msgs::Twist* p = twist_;
  // @@protoc_insertion_point(field_get:mvsim_msgs.SrvGetPoseAnswer.twist)
  return p != NULL ? *p : *reinterpret_cast<const ::mvsim_msgs::Twist*>(
      &::mvsim_msgs::_Twist_default_instance_);
}
inline ::mvsim_msgs::Twist* SrvGetPoseAnswer::release_twist() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.SrvGetPoseAnswer.twist)
  clear_has_twist();
  ::mvsim_msgs::Twist* temp = twist_;
  twist_ = NULL;
  return temp;
}
inline ::mvsim_msgs::Twist* SrvGetPoseAnswer::mutable_twist() {
  set_has_twist();
  if (twist_ == NULL) {
    auto* p = CreateMaybeMessage<::mvsim_msgs::Twist>(GetArenaNoVirtual());
    twist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.SrvGetPoseAnswer.twist)
  return twist_;
}
inline void SrvGetPoseAnswer::set_allocated_twist(::mvsim_msgs::Twist* twist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(twist_);
  }
  if (twist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      twist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    set_has_twist();
  } else {
    clear_has_twist();
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.SrvGetPoseAnswer.twist)
}

// required bool objectIsInCollision = 4;
inline bool SrvGetPoseAnswer::has_objectisincollision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SrvGetPoseAnswer::set_has_objectisincollision() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SrvGetPoseAnswer::clear_has_objectisincollision() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SrvGetPoseAnswer::clear_objectisincollision() {
  objectisincollision_ = false;
  clear_has_objectisincollision();
}
inline bool SrvGetPoseAnswer::objectisincollision() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.SrvGetPoseAnswer.objectIsInCollision)
  return objectisincollision_;
}
inline void SrvGetPoseAnswer::set_objectisincollision(bool value) {
  set_has_objectisincollision();
  objectisincollision_ = value;
  // @@protoc_insertion_point(field_set:mvsim_msgs.SrvGetPoseAnswer.objectIsInCollision)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mvsim_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_SrvGetPoseAnswer_2eproto
