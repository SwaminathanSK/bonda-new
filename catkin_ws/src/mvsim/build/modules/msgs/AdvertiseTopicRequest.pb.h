// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdvertiseTopicRequest.proto

#ifndef PROTOBUF_INCLUDED_AdvertiseTopicRequest_2eproto
#define PROTOBUF_INCLUDED_AdvertiseTopicRequest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_AdvertiseTopicRequest_2eproto 

namespace protobuf_AdvertiseTopicRequest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_AdvertiseTopicRequest_2eproto
namespace mvsim_msgs {
class AdvertiseTopicRequest;
class AdvertiseTopicRequestDefaultTypeInternal;
extern AdvertiseTopicRequestDefaultTypeInternal _AdvertiseTopicRequest_default_instance_;
}  // namespace mvsim_msgs
namespace google {
namespace protobuf {
template<> ::mvsim_msgs::AdvertiseTopicRequest* Arena::CreateMaybeMessage<::mvsim_msgs::AdvertiseTopicRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mvsim_msgs {

// ===================================================================

class AdvertiseTopicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mvsim_msgs.AdvertiseTopicRequest) */ {
 public:
  AdvertiseTopicRequest();
  virtual ~AdvertiseTopicRequest();

  AdvertiseTopicRequest(const AdvertiseTopicRequest& from);

  inline AdvertiseTopicRequest& operator=(const AdvertiseTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdvertiseTopicRequest(AdvertiseTopicRequest&& from) noexcept
    : AdvertiseTopicRequest() {
    *this = ::std::move(from);
  }

  inline AdvertiseTopicRequest& operator=(AdvertiseTopicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvertiseTopicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdvertiseTopicRequest* internal_default_instance() {
    return reinterpret_cast<const AdvertiseTopicRequest*>(
               &_AdvertiseTopicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AdvertiseTopicRequest* other);
  friend void swap(AdvertiseTopicRequest& a, AdvertiseTopicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdvertiseTopicRequest* New() const final {
    return CreateMaybeMessage<AdvertiseTopicRequest>(NULL);
  }

  AdvertiseTopicRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdvertiseTopicRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AdvertiseTopicRequest& from);
  void MergeFrom(const AdvertiseTopicRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdvertiseTopicRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string topicName = 1;
  bool has_topicname() const;
  void clear_topicname();
  static const int kTopicNameFieldNumber = 1;
  const ::std::string& topicname() const;
  void set_topicname(const ::std::string& value);
  #if LANG_CXX11
  void set_topicname(::std::string&& value);
  #endif
  void set_topicname(const char* value);
  void set_topicname(const char* value, size_t size);
  ::std::string* mutable_topicname();
  ::std::string* release_topicname();
  void set_allocated_topicname(::std::string* topicname);

  // required string topicTypeName = 2;
  bool has_topictypename() const;
  void clear_topictypename();
  static const int kTopicTypeNameFieldNumber = 2;
  const ::std::string& topictypename() const;
  void set_topictypename(const ::std::string& value);
  #if LANG_CXX11
  void set_topictypename(::std::string&& value);
  #endif
  void set_topictypename(const char* value);
  void set_topictypename(const char* value, size_t size);
  ::std::string* mutable_topictypename();
  ::std::string* release_topictypename();
  void set_allocated_topictypename(::std::string* topictypename);

  // required string endpoint = 3;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 3;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // required string nodeName = 4;
  bool has_nodename() const;
  void clear_nodename();
  static const int kNodeNameFieldNumber = 4;
  const ::std::string& nodename() const;
  void set_nodename(const ::std::string& value);
  #if LANG_CXX11
  void set_nodename(::std::string&& value);
  #endif
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  ::std::string* mutable_nodename();
  ::std::string* release_nodename();
  void set_allocated_nodename(::std::string* nodename);

  // @@protoc_insertion_point(class_scope:mvsim_msgs.AdvertiseTopicRequest)
 private:
  void set_has_topicname();
  void clear_has_topicname();
  void set_has_topictypename();
  void clear_has_topictypename();
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_nodename();
  void clear_has_nodename();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr topicname_;
  ::google::protobuf::internal::ArenaStringPtr topictypename_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr nodename_;
  friend struct ::protobuf_AdvertiseTopicRequest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdvertiseTopicRequest

// required string topicName = 1;
inline bool AdvertiseTopicRequest::has_topicname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdvertiseTopicRequest::set_has_topicname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdvertiseTopicRequest::clear_has_topicname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdvertiseTopicRequest::clear_topicname() {
  topicname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topicname();
}
inline const ::std::string& AdvertiseTopicRequest::topicname() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.AdvertiseTopicRequest.topicName)
  return topicname_.GetNoArena();
}
inline void AdvertiseTopicRequest::set_topicname(const ::std::string& value) {
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvsim_msgs.AdvertiseTopicRequest.topicName)
}
#if LANG_CXX11
inline void AdvertiseTopicRequest::set_topicname(::std::string&& value) {
  set_has_topicname();
  topicname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mvsim_msgs.AdvertiseTopicRequest.topicName)
}
#endif
inline void AdvertiseTopicRequest::set_topicname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvsim_msgs.AdvertiseTopicRequest.topicName)
}
inline void AdvertiseTopicRequest::set_topicname(const char* value, size_t size) {
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvsim_msgs.AdvertiseTopicRequest.topicName)
}
inline ::std::string* AdvertiseTopicRequest::mutable_topicname() {
  set_has_topicname();
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.AdvertiseTopicRequest.topicName)
  return topicname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdvertiseTopicRequest::release_topicname() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.AdvertiseTopicRequest.topicName)
  if (!has_topicname()) {
    return NULL;
  }
  clear_has_topicname();
  return topicname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdvertiseTopicRequest::set_allocated_topicname(::std::string* topicname) {
  if (topicname != NULL) {
    set_has_topicname();
  } else {
    clear_has_topicname();
  }
  topicname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topicname);
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.AdvertiseTopicRequest.topicName)
}

// required string topicTypeName = 2;
inline bool AdvertiseTopicRequest::has_topictypename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdvertiseTopicRequest::set_has_topictypename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdvertiseTopicRequest::clear_has_topictypename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdvertiseTopicRequest::clear_topictypename() {
  topictypename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topictypename();
}
inline const ::std::string& AdvertiseTopicRequest::topictypename() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.AdvertiseTopicRequest.topicTypeName)
  return topictypename_.GetNoArena();
}
inline void AdvertiseTopicRequest::set_topictypename(const ::std::string& value) {
  set_has_topictypename();
  topictypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvsim_msgs.AdvertiseTopicRequest.topicTypeName)
}
#if LANG_CXX11
inline void AdvertiseTopicRequest::set_topictypename(::std::string&& value) {
  set_has_topictypename();
  topictypename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mvsim_msgs.AdvertiseTopicRequest.topicTypeName)
}
#endif
inline void AdvertiseTopicRequest::set_topictypename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topictypename();
  topictypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvsim_msgs.AdvertiseTopicRequest.topicTypeName)
}
inline void AdvertiseTopicRequest::set_topictypename(const char* value, size_t size) {
  set_has_topictypename();
  topictypename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvsim_msgs.AdvertiseTopicRequest.topicTypeName)
}
inline ::std::string* AdvertiseTopicRequest::mutable_topictypename() {
  set_has_topictypename();
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.AdvertiseTopicRequest.topicTypeName)
  return topictypename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdvertiseTopicRequest::release_topictypename() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.AdvertiseTopicRequest.topicTypeName)
  if (!has_topictypename()) {
    return NULL;
  }
  clear_has_topictypename();
  return topictypename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdvertiseTopicRequest::set_allocated_topictypename(::std::string* topictypename) {
  if (topictypename != NULL) {
    set_has_topictypename();
  } else {
    clear_has_topictypename();
  }
  topictypename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topictypename);
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.AdvertiseTopicRequest.topicTypeName)
}

// required string endpoint = 3;
inline bool AdvertiseTopicRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdvertiseTopicRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdvertiseTopicRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdvertiseTopicRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& AdvertiseTopicRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.AdvertiseTopicRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void AdvertiseTopicRequest::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvsim_msgs.AdvertiseTopicRequest.endpoint)
}
#if LANG_CXX11
inline void AdvertiseTopicRequest::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mvsim_msgs.AdvertiseTopicRequest.endpoint)
}
#endif
inline void AdvertiseTopicRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvsim_msgs.AdvertiseTopicRequest.endpoint)
}
inline void AdvertiseTopicRequest::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvsim_msgs.AdvertiseTopicRequest.endpoint)
}
inline ::std::string* AdvertiseTopicRequest::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.AdvertiseTopicRequest.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdvertiseTopicRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.AdvertiseTopicRequest.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdvertiseTopicRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.AdvertiseTopicRequest.endpoint)
}

// required string nodeName = 4;
inline bool AdvertiseTopicRequest::has_nodename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdvertiseTopicRequest::set_has_nodename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdvertiseTopicRequest::clear_has_nodename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdvertiseTopicRequest::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nodename();
}
inline const ::std::string& AdvertiseTopicRequest::nodename() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.AdvertiseTopicRequest.nodeName)
  return nodename_.GetNoArena();
}
inline void AdvertiseTopicRequest::set_nodename(const ::std::string& value) {
  set_has_nodename();
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvsim_msgs.AdvertiseTopicRequest.nodeName)
}
#if LANG_CXX11
inline void AdvertiseTopicRequest::set_nodename(::std::string&& value) {
  set_has_nodename();
  nodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mvsim_msgs.AdvertiseTopicRequest.nodeName)
}
#endif
inline void AdvertiseTopicRequest::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nodename();
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvsim_msgs.AdvertiseTopicRequest.nodeName)
}
inline void AdvertiseTopicRequest::set_nodename(const char* value, size_t size) {
  set_has_nodename();
  nodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvsim_msgs.AdvertiseTopicRequest.nodeName)
}
inline ::std::string* AdvertiseTopicRequest::mutable_nodename() {
  set_has_nodename();
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.AdvertiseTopicRequest.nodeName)
  return nodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdvertiseTopicRequest::release_nodename() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.AdvertiseTopicRequest.nodeName)
  if (!has_nodename()) {
    return NULL;
  }
  clear_has_nodename();
  return nodename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdvertiseTopicRequest::set_allocated_nodename(::std::string* nodename) {
  if (nodename != NULL) {
    set_has_nodename();
  } else {
    clear_has_nodename();
  }
  nodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.AdvertiseTopicRequest.nodeName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mvsim_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_AdvertiseTopicRequest_2eproto
