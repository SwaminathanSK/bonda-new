// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GetServiceInfoAnswer.proto

#ifndef PROTOBUF_INCLUDED_GetServiceInfoAnswer_2eproto
#define PROTOBUF_INCLUDED_GetServiceInfoAnswer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_GetServiceInfoAnswer_2eproto 

namespace protobuf_GetServiceInfoAnswer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_GetServiceInfoAnswer_2eproto
namespace mvsim_msgs {
class GetServiceInfoAnswer;
class GetServiceInfoAnswerDefaultTypeInternal;
extern GetServiceInfoAnswerDefaultTypeInternal _GetServiceInfoAnswer_default_instance_;
}  // namespace mvsim_msgs
namespace google {
namespace protobuf {
template<> ::mvsim_msgs::GetServiceInfoAnswer* Arena::CreateMaybeMessage<::mvsim_msgs::GetServiceInfoAnswer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mvsim_msgs {

// ===================================================================

class GetServiceInfoAnswer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mvsim_msgs.GetServiceInfoAnswer) */ {
 public:
  GetServiceInfoAnswer();
  virtual ~GetServiceInfoAnswer();

  GetServiceInfoAnswer(const GetServiceInfoAnswer& from);

  inline GetServiceInfoAnswer& operator=(const GetServiceInfoAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServiceInfoAnswer(GetServiceInfoAnswer&& from) noexcept
    : GetServiceInfoAnswer() {
    *this = ::std::move(from);
  }

  inline GetServiceInfoAnswer& operator=(GetServiceInfoAnswer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServiceInfoAnswer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServiceInfoAnswer* internal_default_instance() {
    return reinterpret_cast<const GetServiceInfoAnswer*>(
               &_GetServiceInfoAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetServiceInfoAnswer* other);
  friend void swap(GetServiceInfoAnswer& a, GetServiceInfoAnswer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServiceInfoAnswer* New() const final {
    return CreateMaybeMessage<GetServiceInfoAnswer>(NULL);
  }

  GetServiceInfoAnswer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetServiceInfoAnswer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetServiceInfoAnswer& from);
  void MergeFrom(const GetServiceInfoAnswer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceInfoAnswer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string errorMessage = 2;
  bool has_errormessage() const;
  void clear_errormessage();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& errormessage() const;
  void set_errormessage(const ::std::string& value);
  #if LANG_CXX11
  void set_errormessage(::std::string&& value);
  #endif
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  ::std::string* mutable_errormessage();
  ::std::string* release_errormessage();
  void set_allocated_errormessage(::std::string* errormessage);

  // optional string serviceEndpoint = 3;
  bool has_serviceendpoint() const;
  void clear_serviceendpoint();
  static const int kServiceEndpointFieldNumber = 3;
  const ::std::string& serviceendpoint() const;
  void set_serviceendpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_serviceendpoint(::std::string&& value);
  #endif
  void set_serviceendpoint(const char* value);
  void set_serviceendpoint(const char* value, size_t size);
  ::std::string* mutable_serviceendpoint();
  ::std::string* release_serviceendpoint();
  void set_allocated_serviceendpoint(::std::string* serviceendpoint);

  // optional string serviceNodeName = 4;
  bool has_servicenodename() const;
  void clear_servicenodename();
  static const int kServiceNodeNameFieldNumber = 4;
  const ::std::string& servicenodename() const;
  void set_servicenodename(const ::std::string& value);
  #if LANG_CXX11
  void set_servicenodename(::std::string&& value);
  #endif
  void set_servicenodename(const char* value);
  void set_servicenodename(const char* value, size_t size);
  ::std::string* mutable_servicenodename();
  ::std::string* release_servicenodename();
  void set_allocated_servicenodename(::std::string* servicenodename);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:mvsim_msgs.GetServiceInfoAnswer)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_errormessage();
  void clear_has_errormessage();
  void set_has_serviceendpoint();
  void clear_has_serviceendpoint();
  void set_has_servicenodename();
  void clear_has_servicenodename();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr errormessage_;
  ::google::protobuf::internal::ArenaStringPtr serviceendpoint_;
  ::google::protobuf::internal::ArenaStringPtr servicenodename_;
  bool success_;
  friend struct ::protobuf_GetServiceInfoAnswer_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetServiceInfoAnswer

// required bool success = 1;
inline bool GetServiceInfoAnswer::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetServiceInfoAnswer::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetServiceInfoAnswer::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetServiceInfoAnswer::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool GetServiceInfoAnswer::success() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.GetServiceInfoAnswer.success)
  return success_;
}
inline void GetServiceInfoAnswer::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:mvsim_msgs.GetServiceInfoAnswer.success)
}

// optional string errorMessage = 2;
inline bool GetServiceInfoAnswer::has_errormessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetServiceInfoAnswer::set_has_errormessage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetServiceInfoAnswer::clear_has_errormessage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetServiceInfoAnswer::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errormessage();
}
inline const ::std::string& GetServiceInfoAnswer::errormessage() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.GetServiceInfoAnswer.errorMessage)
  return errormessage_.GetNoArena();
}
inline void GetServiceInfoAnswer::set_errormessage(const ::std::string& value) {
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvsim_msgs.GetServiceInfoAnswer.errorMessage)
}
#if LANG_CXX11
inline void GetServiceInfoAnswer::set_errormessage(::std::string&& value) {
  set_has_errormessage();
  errormessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mvsim_msgs.GetServiceInfoAnswer.errorMessage)
}
#endif
inline void GetServiceInfoAnswer::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvsim_msgs.GetServiceInfoAnswer.errorMessage)
}
inline void GetServiceInfoAnswer::set_errormessage(const char* value, size_t size) {
  set_has_errormessage();
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvsim_msgs.GetServiceInfoAnswer.errorMessage)
}
inline ::std::string* GetServiceInfoAnswer::mutable_errormessage() {
  set_has_errormessage();
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.GetServiceInfoAnswer.errorMessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServiceInfoAnswer::release_errormessage() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.GetServiceInfoAnswer.errorMessage)
  if (!has_errormessage()) {
    return NULL;
  }
  clear_has_errormessage();
  return errormessage_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceInfoAnswer::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    set_has_errormessage();
  } else {
    clear_has_errormessage();
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.GetServiceInfoAnswer.errorMessage)
}

// optional string serviceEndpoint = 3;
inline bool GetServiceInfoAnswer::has_serviceendpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetServiceInfoAnswer::set_has_serviceendpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetServiceInfoAnswer::clear_has_serviceendpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetServiceInfoAnswer::clear_serviceendpoint() {
  serviceendpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serviceendpoint();
}
inline const ::std::string& GetServiceInfoAnswer::serviceendpoint() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.GetServiceInfoAnswer.serviceEndpoint)
  return serviceendpoint_.GetNoArena();
}
inline void GetServiceInfoAnswer::set_serviceendpoint(const ::std::string& value) {
  set_has_serviceendpoint();
  serviceendpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvsim_msgs.GetServiceInfoAnswer.serviceEndpoint)
}
#if LANG_CXX11
inline void GetServiceInfoAnswer::set_serviceendpoint(::std::string&& value) {
  set_has_serviceendpoint();
  serviceendpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mvsim_msgs.GetServiceInfoAnswer.serviceEndpoint)
}
#endif
inline void GetServiceInfoAnswer::set_serviceendpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serviceendpoint();
  serviceendpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvsim_msgs.GetServiceInfoAnswer.serviceEndpoint)
}
inline void GetServiceInfoAnswer::set_serviceendpoint(const char* value, size_t size) {
  set_has_serviceendpoint();
  serviceendpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvsim_msgs.GetServiceInfoAnswer.serviceEndpoint)
}
inline ::std::string* GetServiceInfoAnswer::mutable_serviceendpoint() {
  set_has_serviceendpoint();
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.GetServiceInfoAnswer.serviceEndpoint)
  return serviceendpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServiceInfoAnswer::release_serviceendpoint() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.GetServiceInfoAnswer.serviceEndpoint)
  if (!has_serviceendpoint()) {
    return NULL;
  }
  clear_has_serviceendpoint();
  return serviceendpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceInfoAnswer::set_allocated_serviceendpoint(::std::string* serviceendpoint) {
  if (serviceendpoint != NULL) {
    set_has_serviceendpoint();
  } else {
    clear_has_serviceendpoint();
  }
  serviceendpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serviceendpoint);
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.GetServiceInfoAnswer.serviceEndpoint)
}

// optional string serviceNodeName = 4;
inline bool GetServiceInfoAnswer::has_servicenodename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetServiceInfoAnswer::set_has_servicenodename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetServiceInfoAnswer::clear_has_servicenodename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetServiceInfoAnswer::clear_servicenodename() {
  servicenodename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_servicenodename();
}
inline const ::std::string& GetServiceInfoAnswer::servicenodename() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.GetServiceInfoAnswer.serviceNodeName)
  return servicenodename_.GetNoArena();
}
inline void GetServiceInfoAnswer::set_servicenodename(const ::std::string& value) {
  set_has_servicenodename();
  servicenodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvsim_msgs.GetServiceInfoAnswer.serviceNodeName)
}
#if LANG_CXX11
inline void GetServiceInfoAnswer::set_servicenodename(::std::string&& value) {
  set_has_servicenodename();
  servicenodename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mvsim_msgs.GetServiceInfoAnswer.serviceNodeName)
}
#endif
inline void GetServiceInfoAnswer::set_servicenodename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_servicenodename();
  servicenodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvsim_msgs.GetServiceInfoAnswer.serviceNodeName)
}
inline void GetServiceInfoAnswer::set_servicenodename(const char* value, size_t size) {
  set_has_servicenodename();
  servicenodename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvsim_msgs.GetServiceInfoAnswer.serviceNodeName)
}
inline ::std::string* GetServiceInfoAnswer::mutable_servicenodename() {
  set_has_servicenodename();
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.GetServiceInfoAnswer.serviceNodeName)
  return servicenodename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServiceInfoAnswer::release_servicenodename() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.GetServiceInfoAnswer.serviceNodeName)
  if (!has_servicenodename()) {
    return NULL;
  }
  clear_has_servicenodename();
  return servicenodename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServiceInfoAnswer::set_allocated_servicenodename(::std::string* servicenodename) {
  if (servicenodename != NULL) {
    set_has_servicenodename();
  } else {
    clear_has_servicenodename();
  }
  servicenodename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicenodename);
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.GetServiceInfoAnswer.serviceNodeName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mvsim_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_GetServiceInfoAnswer_2eproto
