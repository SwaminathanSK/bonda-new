// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ObservationLidar2D.proto

#include "ObservationLidar2D.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Pose_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Pose_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Pose;
}  // namespace protobuf_Pose_2eproto
namespace mvsim_msgs {
class ObservationLidar2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObservationLidar2D>
      _instance;
} _ObservationLidar2D_default_instance_;
}  // namespace mvsim_msgs
namespace protobuf_ObservationLidar2D_2eproto {
static void InitDefaultsObservationLidar2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mvsim_msgs::_ObservationLidar2D_default_instance_;
    new (ptr) ::mvsim_msgs::ObservationLidar2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mvsim_msgs::ObservationLidar2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObservationLidar2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObservationLidar2D}, {
      &protobuf_Pose_2eproto::scc_info_Pose.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ObservationLidar2D.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvsim_msgs::ObservationLidar2D, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvsim_msgs::ObservationLidar2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvsim_msgs::ObservationLidar2D, unixtimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvsim_msgs::ObservationLidar2D, sourceobjectid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvsim_msgs::ObservationLidar2D, scanranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvsim_msgs::ObservationLidar2D, validranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvsim_msgs::ObservationLidar2D, aperture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvsim_msgs::ObservationLidar2D, ccw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvsim_msgs::ObservationLidar2D, maxrange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mvsim_msgs::ObservationLidar2D, sensorpose_),
  2,
  0,
  ~0u,
  ~0u,
  3,
  4,
  5,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::mvsim_msgs::ObservationLidar2D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mvsim_msgs::_ObservationLidar2D_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ObservationLidar2D.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030ObservationLidar2D.proto\022\nmvsim_msgs\032\n"
      "Pose.proto\"\303\001\n\022ObservationLidar2D\022\025\n\runi"
      "xTimestamp\030\001 \002(\001\022\026\n\016sourceObjectId\030\002 \002(\t"
      "\022\022\n\nscanRanges\030\003 \003(\002\022\023\n\013validRanges\030\004 \003("
      "\010\022\020\n\010aperture\030\005 \002(\002\022\013\n\003ccw\030\006 \002(\010\022\020\n\010maxR"
      "ange\030\007 \002(\002\022$\n\nsensorPose\030\010 \002(\0132\020.mvsim_m"
      "sgs.Pose"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ObservationLidar2D.proto", &protobuf_RegisterTypes);
  ::protobuf_Pose_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ObservationLidar2D_2eproto
namespace mvsim_msgs {

// ===================================================================

void ObservationLidar2D::InitAsDefaultInstance() {
  ::mvsim_msgs::_ObservationLidar2D_default_instance_._instance.get_mutable()->sensorpose_ = const_cast< ::mvsim_msgs::Pose*>(
      ::mvsim_msgs::Pose::internal_default_instance());
}
void ObservationLidar2D::clear_sensorpose() {
  if (sensorpose_ != NULL) sensorpose_->Clear();
  clear_has_sensorpose();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservationLidar2D::kUnixTimestampFieldNumber;
const int ObservationLidar2D::kSourceObjectIdFieldNumber;
const int ObservationLidar2D::kScanRangesFieldNumber;
const int ObservationLidar2D::kValidRangesFieldNumber;
const int ObservationLidar2D::kApertureFieldNumber;
const int ObservationLidar2D::kCcwFieldNumber;
const int ObservationLidar2D::kMaxRangeFieldNumber;
const int ObservationLidar2D::kSensorPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservationLidar2D::ObservationLidar2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ObservationLidar2D_2eproto::scc_info_ObservationLidar2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mvsim_msgs.ObservationLidar2D)
}
ObservationLidar2D::ObservationLidar2D(const ObservationLidar2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      scanranges_(from.scanranges_),
      validranges_(from.validranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourceobjectid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sourceobjectid()) {
    sourceobjectid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceobjectid_);
  }
  if (from.has_sensorpose()) {
    sensorpose_ = new ::mvsim_msgs::Pose(*from.sensorpose_);
  } else {
    sensorpose_ = NULL;
  }
  ::memcpy(&unixtimestamp_, &from.unixtimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxrange_) -
    reinterpret_cast<char*>(&unixtimestamp_)) + sizeof(maxrange_));
  // @@protoc_insertion_point(copy_constructor:mvsim_msgs.ObservationLidar2D)
}

void ObservationLidar2D::SharedCtor() {
  sourceobjectid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sensorpose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxrange_) -
      reinterpret_cast<char*>(&sensorpose_)) + sizeof(maxrange_));
}

ObservationLidar2D::~ObservationLidar2D() {
  // @@protoc_insertion_point(destructor:mvsim_msgs.ObservationLidar2D)
  SharedDtor();
}

void ObservationLidar2D::SharedDtor() {
  sourceobjectid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sensorpose_;
}

void ObservationLidar2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObservationLidar2D::descriptor() {
  ::protobuf_ObservationLidar2D_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ObservationLidar2D_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObservationLidar2D& ObservationLidar2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ObservationLidar2D_2eproto::scc_info_ObservationLidar2D.base);
  return *internal_default_instance();
}


void ObservationLidar2D::Clear() {
// @@protoc_insertion_point(message_clear_start:mvsim_msgs.ObservationLidar2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scanranges_.Clear();
  validranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sourceobjectid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sensorpose_ != NULL);
      sensorpose_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&unixtimestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxrange_) -
        reinterpret_cast<char*>(&unixtimestamp_)) + sizeof(maxrange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObservationLidar2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mvsim_msgs.ObservationLidar2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double unixTimestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_unixtimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unixtimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sourceObjectId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceobjectid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceobjectid().data(), static_cast<int>(this->sourceobjectid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mvsim_msgs.ObservationLidar2D.sourceObjectId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float scanRanges = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_scanranges())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scanranges())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool validRanges = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32u, input, this->mutable_validranges())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_validranges())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float aperture = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_aperture();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aperture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool ccw = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ccw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ccw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float maxRange = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_maxrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .mvsim_msgs.Pose sensorPose = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensorpose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mvsim_msgs.ObservationLidar2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mvsim_msgs.ObservationLidar2D)
  return false;
#undef DO_
}

void ObservationLidar2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mvsim_msgs.ObservationLidar2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double unixTimestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->unixtimestamp(), output);
  }

  // required string sourceObjectId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceobjectid().data(), static_cast<int>(this->sourceobjectid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mvsim_msgs.ObservationLidar2D.sourceObjectId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sourceobjectid(), output);
  }

  // repeated float scanRanges = 3;
  for (int i = 0, n = this->scanranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->scanranges(i), output);
  }

  // repeated bool validRanges = 4;
  for (int i = 0, n = this->validranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->validranges(i), output);
  }

  // required float aperture = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->aperture(), output);
  }

  // required bool ccw = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ccw(), output);
  }

  // required float maxRange = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxrange(), output);
  }

  // required .mvsim_msgs.Pose sensorPose = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_sensorpose(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mvsim_msgs.ObservationLidar2D)
}

::google::protobuf::uint8* ObservationLidar2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mvsim_msgs.ObservationLidar2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double unixTimestamp = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->unixtimestamp(), target);
  }

  // required string sourceObjectId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceobjectid().data(), static_cast<int>(this->sourceobjectid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mvsim_msgs.ObservationLidar2D.sourceObjectId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourceobjectid(), target);
  }

  // repeated float scanRanges = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->scanranges_, target);

  // repeated bool validRanges = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(4, this->validranges_, target);

  // required float aperture = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->aperture(), target);
  }

  // required bool ccw = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ccw(), target);
  }

  // required float maxRange = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxrange(), target);
  }

  // required .mvsim_msgs.Pose sensorPose = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_sensorpose(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mvsim_msgs.ObservationLidar2D)
  return target;
}

size_t ObservationLidar2D::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mvsim_msgs.ObservationLidar2D)
  size_t total_size = 0;

  if (has_sourceobjectid()) {
    // required string sourceObjectId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourceobjectid());
  }

  if (has_sensorpose()) {
    // required .mvsim_msgs.Pose sensorPose = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensorpose_);
  }

  if (has_unixtimestamp()) {
    // required double unixTimestamp = 1;
    total_size += 1 + 8;
  }

  if (has_aperture()) {
    // required float aperture = 5;
    total_size += 1 + 4;
  }

  if (has_ccw()) {
    // required bool ccw = 6;
    total_size += 1 + 1;
  }

  if (has_maxrange()) {
    // required float maxRange = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ObservationLidar2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mvsim_msgs.ObservationLidar2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string sourceObjectId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourceobjectid());

    // required .mvsim_msgs.Pose sensorPose = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensorpose_);

    // required double unixTimestamp = 1;
    total_size += 1 + 8;

    // required float aperture = 5;
    total_size += 1 + 4;

    // required bool ccw = 6;
    total_size += 1 + 1;

    // required float maxRange = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float scanRanges = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->scanranges_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->scanranges_size());
    total_size += data_size;
  }

  // repeated bool validRanges = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->validranges_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->validranges_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservationLidar2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mvsim_msgs.ObservationLidar2D)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservationLidar2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObservationLidar2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mvsim_msgs.ObservationLidar2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mvsim_msgs.ObservationLidar2D)
    MergeFrom(*source);
  }
}

void ObservationLidar2D::MergeFrom(const ObservationLidar2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mvsim_msgs.ObservationLidar2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scanranges_.MergeFrom(from.scanranges_);
  validranges_.MergeFrom(from.validranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sourceobjectid();
      sourceobjectid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceobjectid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sensorpose()->::mvsim_msgs::Pose::MergeFrom(from.sensorpose());
    }
    if (cached_has_bits & 0x00000004u) {
      unixtimestamp_ = from.unixtimestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      aperture_ = from.aperture_;
    }
    if (cached_has_bits & 0x00000010u) {
      ccw_ = from.ccw_;
    }
    if (cached_has_bits & 0x00000020u) {
      maxrange_ = from.maxrange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObservationLidar2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mvsim_msgs.ObservationLidar2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationLidar2D::CopyFrom(const ObservationLidar2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mvsim_msgs.ObservationLidar2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationLidar2D::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_sensorpose()) {
    if (!this->sensorpose_->IsInitialized()) return false;
  }
  return true;
}

void ObservationLidar2D::Swap(ObservationLidar2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservationLidar2D::InternalSwap(ObservationLidar2D* other) {
  using std::swap;
  scanranges_.InternalSwap(&other->scanranges_);
  validranges_.InternalSwap(&other->validranges_);
  sourceobjectid_.Swap(&other->sourceobjectid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sensorpose_, other->sensorpose_);
  swap(unixtimestamp_, other->unixtimestamp_);
  swap(aperture_, other->aperture_);
  swap(ccw_, other->ccw_);
  swap(maxrange_, other->maxrange_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObservationLidar2D::GetMetadata() const {
  protobuf_ObservationLidar2D_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ObservationLidar2D_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mvsim_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mvsim_msgs::ObservationLidar2D* Arena::CreateMaybeMessage< ::mvsim_msgs::ObservationLidar2D >(Arena* arena) {
  return Arena::CreateInternal< ::mvsim_msgs::ObservationLidar2D >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
