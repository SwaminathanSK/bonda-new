// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pose.proto

#ifndef PROTOBUF_INCLUDED_Pose_2eproto
#define PROTOBUF_INCLUDED_Pose_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Pose_2eproto 

namespace protobuf_Pose_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Pose_2eproto
namespace mvsim_msgs {
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace mvsim_msgs
namespace google {
namespace protobuf {
template<> ::mvsim_msgs::Pose* Arena::CreateMaybeMessage<::mvsim_msgs::Pose>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mvsim_msgs {

// ===================================================================

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mvsim_msgs.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Pose* other);
  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(NULL);
  }

  Pose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // required double z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // required double yaw = 4;
  bool has_yaw() const;
  void clear_yaw();
  static const int kYawFieldNumber = 4;
  double yaw() const;
  void set_yaw(double value);

  // required double pitch = 5;
  bool has_pitch() const;
  void clear_pitch();
  static const int kPitchFieldNumber = 5;
  double pitch() const;
  void set_pitch(double value);

  // required double roll = 6;
  bool has_roll() const;
  void clear_roll();
  static const int kRollFieldNumber = 6;
  double roll() const;
  void set_roll(double value);

  // @@protoc_insertion_point(class_scope:mvsim_msgs.Pose)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_yaw();
  void clear_has_yaw();
  void set_has_pitch();
  void clear_has_pitch();
  void set_has_roll();
  void clear_has_roll();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  double yaw_;
  double pitch_;
  double roll_;
  friend struct ::protobuf_Pose_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose

// required double x = 1;
inline bool Pose::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pose::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pose::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pose::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Pose::x() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.Pose.x)
  return x_;
}
inline void Pose::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mvsim_msgs.Pose.x)
}

// required double y = 2;
inline bool Pose::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pose::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pose::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pose::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Pose::y() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.Pose.y)
  return y_;
}
inline void Pose::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mvsim_msgs.Pose.y)
}

// required double z = 3;
inline bool Pose::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pose::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pose::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pose::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Pose::z() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.Pose.z)
  return z_;
}
inline void Pose::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:mvsim_msgs.Pose.z)
}

// required double yaw = 4;
inline bool Pose::has_yaw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pose::set_has_yaw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pose::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pose::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double Pose::yaw() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.Pose.yaw)
  return yaw_;
}
inline void Pose::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:mvsim_msgs.Pose.yaw)
}

// required double pitch = 5;
inline bool Pose::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pose::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pose::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pose::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double Pose::pitch() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.Pose.pitch)
  return pitch_;
}
inline void Pose::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:mvsim_msgs.Pose.pitch)
}

// required double roll = 6;
inline bool Pose::has_roll() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pose::set_has_roll() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pose::clear_has_roll() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pose::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double Pose::roll() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.Pose.roll)
  return roll_;
}
inline void Pose::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:mvsim_msgs.Pose.roll)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mvsim_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Pose_2eproto
