// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TimeStampedPose.proto

#ifndef PROTOBUF_INCLUDED_TimeStampedPose_2eproto
#define PROTOBUF_INCLUDED_TimeStampedPose_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Pose.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_TimeStampedPose_2eproto 

namespace protobuf_TimeStampedPose_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_TimeStampedPose_2eproto
namespace mvsim_msgs {
class TimeStampedPose;
class TimeStampedPoseDefaultTypeInternal;
extern TimeStampedPoseDefaultTypeInternal _TimeStampedPose_default_instance_;
}  // namespace mvsim_msgs
namespace google {
namespace protobuf {
template<> ::mvsim_msgs::TimeStampedPose* Arena::CreateMaybeMessage<::mvsim_msgs::TimeStampedPose>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mvsim_msgs {

// ===================================================================

class TimeStampedPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mvsim_msgs.TimeStampedPose) */ {
 public:
  TimeStampedPose();
  virtual ~TimeStampedPose();

  TimeStampedPose(const TimeStampedPose& from);

  inline TimeStampedPose& operator=(const TimeStampedPose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeStampedPose(TimeStampedPose&& from) noexcept
    : TimeStampedPose() {
    *this = ::std::move(from);
  }

  inline TimeStampedPose& operator=(TimeStampedPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeStampedPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeStampedPose* internal_default_instance() {
    return reinterpret_cast<const TimeStampedPose*>(
               &_TimeStampedPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TimeStampedPose* other);
  friend void swap(TimeStampedPose& a, TimeStampedPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeStampedPose* New() const final {
    return CreateMaybeMessage<TimeStampedPose>(NULL);
  }

  TimeStampedPose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimeStampedPose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimeStampedPose& from);
  void MergeFrom(const TimeStampedPose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeStampedPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string objectId = 2;
  bool has_objectid() const;
  void clear_objectid();
  static const int kObjectIdFieldNumber = 2;
  const ::std::string& objectid() const;
  void set_objectid(const ::std::string& value);
  #if LANG_CXX11
  void set_objectid(::std::string&& value);
  #endif
  void set_objectid(const char* value);
  void set_objectid(const char* value, size_t size);
  ::std::string* mutable_objectid();
  ::std::string* release_objectid();
  void set_allocated_objectid(::std::string* objectid);

  // optional string relativeToObjectId = 4;
  bool has_relativetoobjectid() const;
  void clear_relativetoobjectid();
  static const int kRelativeToObjectIdFieldNumber = 4;
  const ::std::string& relativetoobjectid() const;
  void set_relativetoobjectid(const ::std::string& value);
  #if LANG_CXX11
  void set_relativetoobjectid(::std::string&& value);
  #endif
  void set_relativetoobjectid(const char* value);
  void set_relativetoobjectid(const char* value, size_t size);
  ::std::string* mutable_relativetoobjectid();
  ::std::string* release_relativetoobjectid();
  void set_allocated_relativetoobjectid(::std::string* relativetoobjectid);

  // required .mvsim_msgs.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  private:
  const ::mvsim_msgs::Pose& _internal_pose() const;
  public:
  const ::mvsim_msgs::Pose& pose() const;
  ::mvsim_msgs::Pose* release_pose();
  ::mvsim_msgs::Pose* mutable_pose();
  void set_allocated_pose(::mvsim_msgs::Pose* pose);

  // required double unixTimestamp = 1;
  bool has_unixtimestamp() const;
  void clear_unixtimestamp();
  static const int kUnixTimestampFieldNumber = 1;
  double unixtimestamp() const;
  void set_unixtimestamp(double value);

  // @@protoc_insertion_point(class_scope:mvsim_msgs.TimeStampedPose)
 private:
  void set_has_unixtimestamp();
  void clear_has_unixtimestamp();
  void set_has_objectid();
  void clear_has_objectid();
  void set_has_relativetoobjectid();
  void clear_has_relativetoobjectid();
  void set_has_pose();
  void clear_has_pose();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr objectid_;
  ::google::protobuf::internal::ArenaStringPtr relativetoobjectid_;
  ::mvsim_msgs::Pose* pose_;
  double unixtimestamp_;
  friend struct ::protobuf_TimeStampedPose_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeStampedPose

// required double unixTimestamp = 1;
inline bool TimeStampedPose::has_unixtimestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimeStampedPose::set_has_unixtimestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TimeStampedPose::clear_has_unixtimestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TimeStampedPose::clear_unixtimestamp() {
  unixtimestamp_ = 0;
  clear_has_unixtimestamp();
}
inline double TimeStampedPose::unixtimestamp() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.TimeStampedPose.unixTimestamp)
  return unixtimestamp_;
}
inline void TimeStampedPose::set_unixtimestamp(double value) {
  set_has_unixtimestamp();
  unixtimestamp_ = value;
  // @@protoc_insertion_point(field_set:mvsim_msgs.TimeStampedPose.unixTimestamp)
}

// required string objectId = 2;
inline bool TimeStampedPose::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeStampedPose::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeStampedPose::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeStampedPose::clear_objectid() {
  objectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_objectid();
}
inline const ::std::string& TimeStampedPose::objectid() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.TimeStampedPose.objectId)
  return objectid_.GetNoArena();
}
inline void TimeStampedPose::set_objectid(const ::std::string& value) {
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvsim_msgs.TimeStampedPose.objectId)
}
#if LANG_CXX11
inline void TimeStampedPose::set_objectid(::std::string&& value) {
  set_has_objectid();
  objectid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mvsim_msgs.TimeStampedPose.objectId)
}
#endif
inline void TimeStampedPose::set_objectid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvsim_msgs.TimeStampedPose.objectId)
}
inline void TimeStampedPose::set_objectid(const char* value, size_t size) {
  set_has_objectid();
  objectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvsim_msgs.TimeStampedPose.objectId)
}
inline ::std::string* TimeStampedPose::mutable_objectid() {
  set_has_objectid();
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.TimeStampedPose.objectId)
  return objectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimeStampedPose::release_objectid() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.TimeStampedPose.objectId)
  if (!has_objectid()) {
    return NULL;
  }
  clear_has_objectid();
  return objectid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeStampedPose::set_allocated_objectid(::std::string* objectid) {
  if (objectid != NULL) {
    set_has_objectid();
  } else {
    clear_has_objectid();
  }
  objectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), objectid);
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.TimeStampedPose.objectId)
}

// optional string relativeToObjectId = 4;
inline bool TimeStampedPose::has_relativetoobjectid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeStampedPose::set_has_relativetoobjectid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeStampedPose::clear_has_relativetoobjectid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeStampedPose::clear_relativetoobjectid() {
  relativetoobjectid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_relativetoobjectid();
}
inline const ::std::string& TimeStampedPose::relativetoobjectid() const {
  // @@protoc_insertion_point(field_get:mvsim_msgs.TimeStampedPose.relativeToObjectId)
  return relativetoobjectid_.GetNoArena();
}
inline void TimeStampedPose::set_relativetoobjectid(const ::std::string& value) {
  set_has_relativetoobjectid();
  relativetoobjectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mvsim_msgs.TimeStampedPose.relativeToObjectId)
}
#if LANG_CXX11
inline void TimeStampedPose::set_relativetoobjectid(::std::string&& value) {
  set_has_relativetoobjectid();
  relativetoobjectid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mvsim_msgs.TimeStampedPose.relativeToObjectId)
}
#endif
inline void TimeStampedPose::set_relativetoobjectid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_relativetoobjectid();
  relativetoobjectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mvsim_msgs.TimeStampedPose.relativeToObjectId)
}
inline void TimeStampedPose::set_relativetoobjectid(const char* value, size_t size) {
  set_has_relativetoobjectid();
  relativetoobjectid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mvsim_msgs.TimeStampedPose.relativeToObjectId)
}
inline ::std::string* TimeStampedPose::mutable_relativetoobjectid() {
  set_has_relativetoobjectid();
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.TimeStampedPose.relativeToObjectId)
  return relativetoobjectid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimeStampedPose::release_relativetoobjectid() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.TimeStampedPose.relativeToObjectId)
  if (!has_relativetoobjectid()) {
    return NULL;
  }
  clear_has_relativetoobjectid();
  return relativetoobjectid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeStampedPose::set_allocated_relativetoobjectid(::std::string* relativetoobjectid) {
  if (relativetoobjectid != NULL) {
    set_has_relativetoobjectid();
  } else {
    clear_has_relativetoobjectid();
  }
  relativetoobjectid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relativetoobjectid);
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.TimeStampedPose.relativeToObjectId)
}

// required .mvsim_msgs.Pose pose = 3;
inline bool TimeStampedPose::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeStampedPose::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeStampedPose::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mvsim_msgs::Pose& TimeStampedPose::_internal_pose() const {
  return *pose_;
}
inline const ::mvsim_msgs::Pose& TimeStampedPose::pose() const {
  const ::mvsim_msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:mvsim_msgs.TimeStampedPose.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::mvsim_msgs::Pose*>(
      &::mvsim_msgs::_Pose_default_instance_);
}
inline ::mvsim_msgs::Pose* TimeStampedPose::release_pose() {
  // @@protoc_insertion_point(field_release:mvsim_msgs.TimeStampedPose.pose)
  clear_has_pose();
  ::mvsim_msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::mvsim_msgs::Pose* TimeStampedPose::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::mvsim_msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mvsim_msgs.TimeStampedPose.pose)
  return pose_;
}
inline void TimeStampedPose::set_allocated_pose(::mvsim_msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:mvsim_msgs.TimeStampedPose.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace mvsim_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_TimeStampedPose_2eproto
